name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest # Simplified OS matrix for now
    strategy:
      fail-fast: false # Keep fail-fast if desired, or remove
      matrix:
        python-version: ['3.10', '3.11', '3.12'] # Updated Python versions
        # os: [ubuntu-latest] # Explicitly stating ubuntu-latest
        
    steps:
    - uses: actions/checkout@v4 # Updated checkout action
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5 # Updated setup-python action
      with:
        python-version: ${{ matrix.python-version }}
    
    # Cache step removed for simplicity, can be re-added later with updated keying
    # - name: Cache dependencies
    #   uses: actions/cache@v3
    #   with:
    #     path: ~/.cache/pip
    #     key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }} # More specific key
    #     restore-keys: |
    #       ${{ runner.os }}-pip-${{ matrix.python-version }}-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        echo "Installing base dependencies..."
        pip install -r requirements/base.txt
        echo "Installing cognitive dependencies (mamba markers will apply)..."
        pip install -r requirements/cognitive.txt
        echo "Installing heavy dependencies (tensorflow/contourpy markers will apply)..."
        pip install -r requirements/heavy.txt
        echo "Installing development dependencies..."
        pip install -r requirements/dev.txt
        echo "Installing the package in editable mode with extras..."
        pip install -e .[cognitive,full] # Install package with extras
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics
    
    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports # Check current dir, assuming src layout or flat
    
    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=digital_twin_t1d --cov-report=xml --cov-report=html # Assuming src/digital_twin_t1d layout
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4 # Updated codecov action
      with:
        file: ./coverage.xml
        # flags: unittests # Flags can be added if needed
        # name: codecov-umbrella # Name can be customized
        fail_ci_if_error: false # Keep as false if preferred

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 # Updated checkout action
    
    - name: Set up Python
      uses: actions/setup-python@v5 # Updated setup-python action
      with:
        python-version: '3.10' # Or latest stable like 3.11 or 3.12
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Security check with bandit
      run: |
        bandit -r . -ll --exit-zero # Check current dir
    
    - name: Safety check
      run: |
        safety check --json # Consider adding --ignore-vulns if managing known vulns

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4 # Updated checkout action
    
    - name: Set up Python
      uses: actions/setup-python@v5 # Updated setup-python action
      with:
        python-version: '3.10' # Or latest stable for docs
    
    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt # dev.txt should contain Sphinx & theme
        pip install -e .[full] # Install package with extras for doc generation if needed
    
    - name: Build documentation
      run: |
        sphinx-build docs docs/_build/html -b html # Common sphinx command
    
    - name: Upload docs artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: docs/_build/html/